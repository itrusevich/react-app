{"version":3,"sources":["logo.svg","Logo.js","TopMenu.js","Header.js","Content.js","FooterMenu.js","Footer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Logo","src","logo","className","alt","TopMenu","props","topMenu","map","el","key","href","onClick","click","Header","Content","FooterMenu","footerMenu","Footer","type","onChange","e","attempt","target","value","App","version","menuItem","alert","fish","console","log","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"4GAAAA,EAAOC,QAAU,IAA0B,kC,4JCY5BC,MARf,WACE,OACA,6BACE,yBAAKC,IAAKC,IAAMC,UAAU,WAAWC,IAAI,WCQ9BC,MAXf,SAAiBC,GACf,OACE,yBAAKH,UAAU,WACb,iCAAM,kBAAC,EAAD,MAAN,KACA,wBAAIA,UAAU,WACXG,EAAMC,QAAQC,KAAI,SAAAC,GAAE,OAAI,wBAAIC,IAAKD,GAAI,yBAAKN,UAAU,YAAW,uBAAGQ,KAAMF,EAAIN,UAAU,+BAA+BS,QAAS,kBAAKN,EAAMO,MAAMJ,KAAK,gCAASA,IAAxH,YCG/BK,MARf,SAAgBR,GACd,OACE,yBAAKH,UAAU,cACb,kBAAC,EAAD,CAASI,QAASD,EAAMC,QAASM,MAAOP,EAAMO,UCqBrCE,MAzBf,WACE,OACE,yBAAKZ,UAAU,eACb,uCACA,yBAAKA,UAAU,WACb,yBAAKA,UAAU,iBACb,wLAIF,yBAAKA,UAAU,wBACb,qRAIF,yBAAKA,UAAU,iBACb,2LCNKa,MAVf,SAAoBV,GAClB,OACE,yBAAKH,UAAU,WACb,wBAAIA,UAAU,uBACXG,EAAMW,WAAWT,KAAI,SAAAC,GAAE,OAAI,wBAAIC,IAAKD,GAAI,yBAAKN,UAAU,YAAf,IAA4BM,EAA5B,YCQlCS,MAXf,SAAgBZ,GAGd,OACE,yBAAKH,UAAU,cACb,kBAAC,EAAD,CAAYc,WAAYX,EAAMW,aAC9B,2BAAOE,KAAK,OAAOC,SALV,SAACC,GAAD,OAAMf,EAAMgB,QAAQD,EAAEE,OAAOC,YCuB7BC,MAtBf,WAaE,OACE,yBAAKtB,UAAU,OACb,kBAAC,EAAD,CAAQuB,QAdO,SAccnB,QAbjB,CAAC,QAAS,SAAU,WAAY,YAaGM,MANrC,SAACc,GACbC,MAAMD,MAMJ,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAQV,WAdO,CAAC,UAAW,aAAc,gBAAiB,WAAY,OActCK,QAZrB,SAACO,GACdC,QAAQC,IAAI,QAAUF,QCANG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLnB,QAAQmB,MAAMA,EAAMC,c","file":"static/js/main.b5936503.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport './App.css';\nimport logo from './logo.svg';\n\nfunction Logo() {\n  return (\n  <div>\n    <img src={logo} className=\"App-logo\" alt=\"logo\"/>\n  </div>\n  )\n}\n\nexport default Logo;\n","import React from 'react';\nimport './App.css';\nimport Logo from './Logo';\n\nfunction TopMenu(props) {\n  return (\n    <div className=\"flexRow\">\n      <div> <Logo /> </div>\n      <ul className=\"flexRow\">\n        {props.topMenu.map(el => <li key={el}><div className=\"menuItem\"><a href={el} className=\"App-link link-not-underlined\" onClick={()=> props.click(el)}><strong>{el}</strong></a> </div></li>)}\n      </ul>\n    </div>\n  )\n}\n\nexport default TopMenu;\n","import React from 'react';\nimport './App.css';\nimport TopMenu from './TopMenu';\n\nfunction Header(props) {\n  return (\n    <div className=\"App-header\">\n      <TopMenu topMenu={props.topMenu} click={props.click} />\n    </div>\n  )\n}\n\nexport default Header;\n","import React from 'react';\nimport './App.css';\n\nfunction Content() {\n  return (\n    <div className=\"App-content\">\n      <h1>Content</h1>\n      <div className=\"flexRow\">\n        <div className=\"contentColumn\">\n          <p>\n            Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s.\n          </p>\n        </div>\n        <div className=\"contentColumn middle\">\n          <p>\n            Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book.\n      </p>\n        </div>\n        <div className=\"contentColumn\">\n          <p>\n            Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s.\n      </p>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Content;\n","import React from 'react';\nimport './App.css';\n\nfunction FooterMenu(props) {\n  return (\n    <div className=\"flexRow\">\n      <ul className=\"flexRow ulUnordered\" >\n        {props.footerMenu.map(el => <li key={el}><div className=\"menuItem\"> {el} </div></li>)}\n      </ul>\n    </div>\n  )\n}\n\nexport default FooterMenu;\n","import React from 'react';\nimport './App.css';\nimport FooterMenu from './FooterMenu';\n\nfunction Footer(props) {\nconst change = (e)=> props.attempt(e.target.value)\n\n  return (\n    <div className=\"App-footer\">\n      <FooterMenu footerMenu={props.footerMenu} />\n      <input type=\"text\" onChange={change}></input>\n    </div>\n  );\n}\n\nexport default Footer;\n","import React from 'react';\nimport './App.css';\nimport Header from './Header.js';\nimport Content from './Content.js';\nimport Footer from './Footer.js';\n\nfunction App() {\n  const appVersion = '0.2.32';\n  const topMenu = ['About', 'Prices', 'Products', 'Services'];\n  const footerMenu = ['Careers', 'Contact us', 'Return Policy', 'Shipping', 'FAQ']\n\n  const fisher = (fish) => {\n    console.log('Pull ' + fish)\n  }\n\n  const click = (menuItem) => {\n    alert(menuItem);\n  }\n\n  return (\n    <div className=\"App\">\n      <Header version={appVersion} topMenu={topMenu} click = {click}/>\n      <Content />\n      <Footer footerMenu={footerMenu} attempt={fisher}/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}